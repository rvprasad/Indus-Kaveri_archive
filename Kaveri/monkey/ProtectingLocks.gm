/*
 * Menu: Indus > Mark Protecting Lock Acquisitions
 * Kudos: Venkatesh Prasad Ranganath
 * License: CPL 1.0
 * DOM: http://indus.projects.cis.ksu.edu/update/plugins/edu.ksu.cis.indus.kaveri
 * LANG: Groovy
 * Job: UIJob
 * Include-Bundle: edu.ksu.cis.indus.kaveri
 */
 
import org.eclipse.core.runtime.IProgressMonitor;
import org.eclipse.core.runtime.NullProgressMonitor;
import org.eclipse.core.resources.IMarker
import org.eclipse.jface.dialogs.MessageDialog;
import org.eclipse.jface.text.ITextSelection;

import groovy.lang.Closure;

import java.util.Collection;

import edu.ksu.cis.indus.common.datastructures.Pair;
import edu.ksu.cis.indus.staticanalyses.dependency.IDependencyAnalysis;
import edu.ksu.cis.indus.tools.slicer.SlicerTool;

import soot.jimple.Stmt;
import soot.jimple.AssignStmt;


def BANNER = "Calculating protecting lock acquisitions for given expression..."

def SRC_MARK_DESC = "Source expression"
def DEST_MARK_DESC = "protecting lock acquisitions"

def EMPTY_SELECTION_MSG = "There are no expressions in the current selection."
def SOME_IN_BINARY_MSG = "There were some protecting lock acquisitions in classes with no souce files."
def ENTITY_MSG = " protecting lock acquisitions."
def INVALID_SELECTION_MSG = "Please select a line containing an expression in a Java file."
def EMPTY_RESULT_MSG = "There are no protecting lock acquisitions for the expressions in the current selection."


boolean checkValidity(Stmt stmt) {
	return (stmt instanceof AssignStmt 
		&& ((stmt.containsArrayRef() && stmt.getArrayRef().equals(stmt.getRightOp())) 
			|| (stmt.containsFieldRef() && stmt.getFieldRef().equals(stmt.getRightOp()))))
}



Collection getProtectingLocks(stmt, method, mon, mg) {
	def result = []
 	mg.getInterProcedurallyEnclosingMonitorTriples(stmt, method, true).values().each { 
 		result += it.collect { trp -> 
			[ new Pair(trp.getFirst(), trp.getThird()), 
			  new Pair(trp.getSecond(), trp.getThird()) ]
		}
	}
	return result
}

// Customiable part ENDS.  Non-customizable part BEGINS.


Collection getDestExprs(Collection exprs, NullProgressMonitor monitor) {
	def r = []
	def mon = slicer.getMonitorInfo()
	def mg = mon.getMonitorGraph()
	exprs.each { expr -> 
		r += getProtectingLocks(expr.getFirst(), expr.getSecond(), mon, mg)
	}
	return new HashSet(r)
}


Collection getSrcExpressionsInSelection() {
	def r = slicer.getJimpleStmtsForSelection()
	def sootMethod = slicer.getJimpleMethodForSelection()
	def result = []
	r.each { stmt ->
		if (checkValidity(stmt)) {
			result << new Pair(stmt, sootMethod)
		}
	}
	return result
}


void bookmarkSelection(message, ts) {
    def selection = slicer.getSelection()
    m = slicer.getSelectionContainingFile().createMarker(IMarker.BOOKMARK)
    m.setAttribute(IMarker.MESSAGE, "[" + ts + "] " + message)
    m.setAttribute(IMarker.LINE_NUMBER, selection.getStartLine() + 1) // text editor uses 0-offset addressing for lines
}


boolean validSelectionExists() {
	def f = slicer.getSelectionContainingFile()
	def s = slicer.getSelection()
	def n = f.getName()
	return s instanceof ITextSelection && (n.indexOf(".java") == (n.size() - 5))
}

if (slicer.getSlicerTool().isStable()) {
	def monitor = new NullProgressMonitor()
	monitor.beginTask(BANNER, IProgressMonitor.UNKNOWN)
	if (!monitor.isCanceled()) {
		if (validSelectionExists()) {
			def ts = slicer.getCounter()
			bookmarkSelection(SRC_MARK_DESC, ts)
			def srcExprs = getSrcExpressionsInSelection()
			if (srcExprs.isEmpty()) {
				slicer.displayDialog(EMPTY_SELECTION_MSG)
			} else {
				def i = 0
				def b = true
				def destExprs = getDestExprs(srcExprs, monitor)
				if (!destExprs.isEmpty()) {
					out.print(destExprs)
					destExprs.each { destExpr ->
						if (monitor.isCanceled()) {
							return
						}
						b &= slicer.createMarkerForSootStmtMethod(destExpr, DEST_MARK_DESC, ts)
						i++
					}
				}
				if (i == 0) {
					slicer.displayDialog(EMPTY_RESULT_MSG)
				} else {
					def msg = 'There were total of ' + i + ENTITY_MSG
					if (!b) {
						msg += SOME_IN_BINARY_MSG
					}
					slicer.displayDialog(msg)
					window.getActivePage().showView("org.eclipse.ui.views.BookmarkView")
				}
			}
		} else {
			slicer.displayDialog(INVALID_SELECTION_MSG)
		}
	}
	monitor.done()
} else {
	slicer.displayDialog("Please run the slicer before executing this script.")
}