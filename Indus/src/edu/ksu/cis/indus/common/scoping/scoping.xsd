<?xml version="1.0" encoding="UTF-8"?>
<xsd:schema id="scopeSpecification" version="1.0" xml:lang="en"
    xmlns:xsd="http://www.w3.org/2001/XMLSchema"
    xmlns:indus="http://indus.projects.cis.ksu.edu/indus"
    targetNamespace="http://indus.projects.cis.ksu.edu/indus"
    elementFormDefault="qualified"
    attributeFormDefault="qualified"
    blockDefault="restriction"
    finalDefault="restriction">

	<xsd:simpleType id="scopeExtensionType" name="scopeExtensionType">
      <xsd:annotation>
        <xsd:documentation>
          This represents the scope around the specified type.  EXCLUSIVE_ values indicate the all relatives of the type except the current type.
          INCLUSIVE_ values indicate the relatives including the current type.  IDENTITY indicates that only the current type is considered.
          PRIMITIVE should only be used for java primitive types, void, and array types, and in these cases the name specification should be 
          one of the primitive types, void, or the array type such as java.lang.String[. Note that for all constants except IDENTITY, the name 
          specification will be treated as a string, hence, it should be the FQN of the classes specified as types or the names of java primitive types.  
          In case of IDENTITY, the name specification is treated as a regex pattern.
        </xsd:documentation>
      </xsd:annotation>
      <xsd:restriction base="xsd:token">
        <xsd:enumeration value="EXCLUSIVE_ANCESTORS"/>
        <xsd:enumeration value="EXCLUSIVE_DESCENDANTS"/>
        <xsd:enumeration value="INCLUSIVE_ANCESTORS"/>
        <xsd:enumeration value="INCLUSIVE_DESCENDANTS"/>
        <xsd:enumeration value="IDENTITY"/>
        <xsd:enumeration value="PRIMITIVE"/>
      </xsd:restriction>
    </xsd:simpleType>

	<xsd:complexType id="typeSpecType" name="typeSpecType">
		<xsd:annotation>
    	    <xsd:documentation>
    	    This contains the the name specification of the type along with it's inclusion requirement and hierarchical application requirement.
    	    The content will be treated as a regex pattern.
    	    That is, if "inclusion" is true, then the types matching this name are considered; not otherwise.  Depending on the value of 
    	    "scopeExtension" either the type or it's relatives are considered.
    	    </xsd:documentation>
    	</xsd:annotation>
		<xsd:simpleContent>
			<xsd:extension base="xsd:normalizedString">
				<xsd:attribute name="scopeExtension" type="indus:scopeExtensionType" use="required" />
				<xsd:attribute name="inclusion" type="xsd:boolean" use="optional" default="true" />
			</xsd:extension>
		</xsd:simpleContent>
	</xsd:complexType>

	<xsd:element name="typeSpec" id="typeSpec" type="indus:typeSpecType" minOccurs="0" maxOccurs="unbounded"/>	
	
	<xsd:complexType id="typeSpecSequenceType" name="typeSpecSequenceType">
		<xsd:sequence>
			<xsd:element ref="indus:typeSpec"/>
		</xsd:sequence>
	</xsd:complexType>
	
	<xsd:attributeGroup id="accessSpecGroup" name="accessSpecGroup">
		<xsd:annotation>
    	    <xsd:documentation>
        		This captures access specification information.
    		</xsd:documentation>
	    </xsd:annotation>
		<xsd:attribute name="publicAccess" type="xsd:boolean" use="optional" default="true"/>
		<xsd:attribute name="protectedAccess" type="xsd:boolean" use="optional" default="true"/>
		<xsd:attribute name="defaultAccess" type="xsd:boolean" use="optional" default="false"/>		
		<xsd:attribute name="privateAccess" type="xsd:boolean" use="optional" default="false"/>				
	</xsd:attributeGroup>

    <xsd:attribute name="specName" type="xsd:string"/> 

	<xsd:complexType id="abstractSpecType" name="abstractSpecType">
		<xsd:annotation>
    	    <xsd:documentation>
        		This captures attributes common to all specification types.
    		</xsd:documentation>
	    </xsd:annotation>
		<xsd:attribute ref="indus:specName" use="required"/>
	    <xsd:attributeGroup ref="indus:accessSpecGroup"/>
	</xsd:complexType>

	<xsd:complexType id="classSpecType" name="classSpecType">
		<xsd:annotation>
    	    <xsd:documentation>
        		This captures class/interface-level scope information.
    		</xsd:documentation>
	    </xsd:annotation>
	    <xsd:complexContent>
		    <xsd:extension base="indus:abstractSpecType">
				<xsd:sequence>
					<xsd:element ref="indus:typeSpec"/>
				</xsd:sequence>
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>
	
	<xsd:complexType id="methodSpecType" name="methodSpecType">
		<xsd:annotation>
    	    <xsd:documentation>
        		This captures method-level scope information.  The method name is a regular expression.
    		</xsd:documentation>
	    </xsd:annotation>
	    <xsd:complexContent>
  	    	<xsd:extension base="indus:abstractSpecType">
				<xsd:sequence>
					<xsd:element name="declaringClassSpec" type="indus:typeSpecType" minOccurs="1" maxOccurs="1"/>
					<xsd:element name="returnTypeSpec" type="indus:typeSpecType" minOccurs="1" maxOccurs="1"/>
					<xsd:element name="parameterSpecs" type="indus:typeSpecSequenceType"/>
				</xsd:sequence>
				<xsd:attribute name="methodNameSpec" type="xsd:string" use="required" />				
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>

	<xsd:complexType id="fieldSpecType" name="fieldSpecType">
		<xsd:annotation>
    	    <xsd:documentation>
        		This captures field-level scope information.
    		</xsd:documentation>
	    </xsd:annotation>
   	    <xsd:complexContent>
		    <xsd:extension base="indus:abstractSpecType">
				<xsd:sequence>
					<xsd:element name="declaringClassSpec" type="indus:typeSpecType" minOccurs="1" maxOccurs="1"/>
					<xsd:element name="fieldTypeSpec" type="indus:typeSpecType" minOccurs="1" maxOccurs="1"/>
				</xsd:sequence>
				<xsd:attribute name="fieldNameSpec" type="xsd:string" use="required"/>
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>
    
    <xsd:element name="scopeSpec">
    	<xsd:complexType>
	    	<xsd:sequence>
    			<xsd:element name="classSpec" type="indus:classSpecType" minOccurs="0" maxOccurs="unbounded"/>
    			<xsd:element name="methodSpec" type="indus:methodSpecType" minOccurs="0" maxOccurs="unbounded"/>
    			<xsd:element name="fieldSpec" type="indus:fieldSpecType" minOccurs="0" maxOccurs="unbounded"/>    		    		
	    	</xsd:sequence>
    		<xsd:attribute ref="indus:specName" use="required"/>
    	</xsd:complexType>
    </xsd:element>
    
</xsd:schema>
