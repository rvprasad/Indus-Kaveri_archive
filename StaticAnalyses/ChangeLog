2006-01-17 venku <venku@boss.dreamsoft.com>

	* src-xml/edu/ksu/cis/indus/staticanalyses/flow/instances/ofa/OFAXMLizerCLI.java:
		- removed "-l" option as method body loading is the default behavior in SootBasedDriver.loadClassesAndCollectMains().
	* src/edu/ksu/cis/indus/staticanalyses/callgraphs/RTABasedCallInfoCollector.java:
		- ripple effect of removal of IProcessor.processLocals()
		- minor fix ups.
	* src/edu/ksu/cis/indus/staticanalyses/callgraphs/CHABasedCallInfoCollector.java:
		- logging and Java generics.

2006-01-14 venku <venku@boss.dreamsoft.com>

	* src-flow/edu/ksu/cis/indus/staticanalyses/flow/modes/sensitive/allocation/AllocationContext.java:
		- comparison based on referential equality improves accuracy.
	* src/edu/ksu/cis/indus/staticanalyses/callgraphs/CallGraphInfo.java:
		- caching was overestimated for graphCache. This has been fixed.

	* src/edu/ksu/cis/indus/staticanalyses/cfg/LocalUseDefAnalysisv2.java:
		- Java 5 adoption.
		- Due to a bug in Soot, "r78=@caughtException" statement in java.lang.reflect.Proxy#getProxyClass() is not
		included in a basic block.  For this reason, we need to handle this condition and produce a warning when
		appropriate.
	* src/edu/ksu/cis/indus/staticanalyses/callgraphs/CallGraphInfo.java (calleeCallSiteReachabilityCache):
		- changed the cache size to be sufficient to hold all mappings under the assumption that each method will be
		called at most 3 times.

2006-01-13 venku <venku@boss.dreamsoft.com>

	* src/edu/ksu/cis/indus/staticanalyses/callgraphs/CallGraphInfo.java:
		- altered callee-to-callsite cache size
		- used weak reference to cache SCC in a memory optimal manner

2005-12-30 venku <venku@boss.dreamsoft.com>

	* src-test/edu/ksu/cis/indus/staticanalyses/flow/FATestSetup.java:
		- used getEnvironment() instead of getScene()
	* src-temp/ase05/InfluenceChecker.java:
	* src-xml/edu/ksu/cis/indus/staticanalyses/callgraphs/CallGraphXMLizerCLI.java:
	* src-xml/edu/ksu/cis/indus/staticanalyses/concurrency/escape/EscapeAndReadWriteCLI.java:
	* src-xml/edu/ksu/cis/indus/staticanalyses/concurrency/independence/IndependenceDetectionCLI.java:
	* src-xml/edu/ksu/cis/indus/staticanalyses/dependency/DependencyXMLizerCLI.java:
	* src-xml/edu/ksu/cis/indus/staticanalyses/flow/instances/ofa/OFAXMLizerCLI.java:
		- used getEnvironment() instead of getScene()
		- support for cfg-level scoping.
	* src-flow/edu/ksu/cis/indus/staticanalyses/flow/SendTokensWork.java:
		- publicized the constructor for internal used in SCCBasedOptimizer.
	* src-flow/edu/ksu/cis/indus/staticanalyses/flow/IFGNode.java:
		- added a new method in IFGNode that can be used to signal that the node belongs to a SCC containing multiple
		flow nodes in the flow graph.
	* src-flow/edu/ksu/cis/indus/staticanalyses/flow/AbstractFGNode.java:
		- added a new method in AbstractFGNode that can be used set a token sending work.
	* src-flow/edu/ksu/cis/indus/staticanalyses/flow/optimizations/SCCBasedOptimizer.java:
		- added optimization to statically associate a common token sending work to all nodes in an SCC.
		- The changes in this file and the above 3 files were made to facilitate this optimization.
	* src-flow/edu/ksu/cis/indus/staticanalyses/flow/instances/ofa/FlowInsensitiveExprSwitch.java:
		- added logic to use a canonical instance of StringConstant values.

2005-12-26 venku <venku@boss.dreamsoft.com>

	* NOTE - the tracking of concurrent access of static variables is broken in AliasSets and ECBA.
	* src-dependence/edu/ksu/cis/indus/staticanalyses/dependency/InterferenceDAv1.java:
		-  (isStaticFieldDependentOn) changed the condition to check for static field interference.
		- deleted the use and implementation of method considerEffectOfClassInitializers.
	* src-flow/edu/ksu/cis/indus/staticanalyses/flow/processors/AliasedUseDefInfo.java (doesDefReachUse):
		- changed the condition used to determine if the def reaches the use site.
	* src-flow/edu/ksu/cis/indus/staticanalyses/flow/processors/ThreadGraph.java:
		- added some more detail to the result of toString()
		- injectMainThreads() was incorrectly using putIntoCollectionInMap() instead of putAllIntoCollectionIMap(), hence,
		causing incorrect results on <clinit> thread.  FIXED.
	* src-concurrency/edu/ksu/cis/indus/staticanalyses/concurrency/escape/EquivalenceClassBasedEscapeAnalysis.java:
		- added call to ValueProcessor.reset()
	* src-concurrency/edu/ksu/cis/indus/staticanalyses/concurrency/escape/MethodContext.java:
		- unification of null argument alias sets belonging to method contexts raise an exception.
	* src-concurrency/edu/ksu/cis/indus/staticanalyses/concurrency/escape/ValueProcessor.java:
		- Not injecting a alias set for StringConstant and NullConstant will result in unification of null with alias sets while
		unifying MethodContexts. This has been addressed by plugging in a new alias set for these constants.
		- added a cache from string constant to alias sets along with a method to reset this map.
	* src/edu/ksu/cis/indus/staticanalyses/callgraphs/CallGraphInfo.java:
	* src/edu/ksu/cis/indus/staticanalyses/callgraphs/CallInfo.java:
	* src/edu/ksu/cis/indus/staticanalyses/callgraphs/OFABasedCallInfoCollector.java:
		- logging more info.
		- recast logging levels.

2005-12-21 venku <venku@boss.dreamsoft.com>

	* src-flow/edu/ksu/cis/indus/staticanalyses/flow/instances/ofa/MethodVariant.java:
		- the fix for Bandera bug 742 did not make its way into the main trunk.  This has been fixed.

2005-12-20 venku <venku@boss.dreamsoft.com>

	* src-dependence/edu/ksu/cis/indus/staticanalyses/dependency/ReadyDAv1.java:
		- used type information to further prune inter-thread ready dependence stemming from monitors.

2005-12-19 venku <venku@boss.dreamsoft.com>

	* src-concurrency/edu/ksu/cis/indus/staticanalyses/concurrency/SafeLockAnalysis.java:
		- strengthened the pre-condition of isLockSafe() by changing the type of its parameter -- ripple effect of the
		change to IMonitorInfo interface
	* src-concurrency/edu/ksu/cis/indus/staticanalyses/concurrency/MonitorAnalysis.java:
		- formatting
		- strengthened the pre-condition of getInterProcedurallyEnclosedStmts() by changing the type of its parameter
		- used MonitorStmt instead of Stmt wherever possible
	* src-dependence/edu/ksu/cis/indus/staticanalyses/dependency/ReadyDAv1.java:
		- logging
		- comments
		- fixed an error introduced during Java 5 adoption in processRule2() method
	* src-dependence/edu/ksu/cis/indus/staticanalyses/dependency/SynchronizationDA.java:
		- weakened few type checks from Enter/ExitMonitorStmt to MonitorStmt

2005-12-15  venku  <rvprasad@cis.ksu.edu>

	* src-dependence/edu/ksu/cis/indus/staticanalyses/dependency/InterferenceDAv1.java:
		- Final instance fields were being considered for interference dependence.  FIXED.
	* src-concurrency/edu/ksu/cis/indus/staticanalyses/concurrency/escape/EquivalenceClaapeAnalysis.java:
		- Added logic to canonicalize class level alias sets after phase 3
		- Added logic to unify class level alias sets after phase 2
	* src-concurrency/edu/ksu/cis/indus/staticanalyses/concurrency/escape/ValueProcessor.java:
		- Ripple effect of removing global field in AliasSet
	* src-concurrency/edu/ksu/cis/indus/staticanalyses/concurrency/escape/MethodContext.java:
		- Removed updation of class level alias sets while unifying method contexts.
	* src-concurrency/edu/ksu/cis/indus/staticanalyses/concurrency/escape/AliasSet.java:
		- Removed global field in AliasSet as it was not serving any purpose.

2005-06-27  venku  <rvprasad@cis.ksu.edu>

	* assumed that class initializers are always simple and will not lead to interference with other class initializers.
	* deleted EscapeInfo.staticfieldAccessShared(SootClass, SootMethod, SootClass, SootMethod)
	* moved AnalysesController from impl package to processing package.
	* added an intraprocedural reachability method to CFGAnalysis and used it in AliasedUseDefInfo.
	* refactored AliasedUseDefInfo and AliasedUseDefInfoV2 to accomodate change to CFGAnalysis.
	* DataAliasBasedCallingContextRetriever was missing the corner case where use and def occurred in the same
	method when there were no callers. FIXED.
	* refactored concurrency.atomicity package to concurrency.independence
	* renamed AtomicXXXX classes as IndependentXXXX.

2005-04-15  venku  <rvprasad@cis.ksu.edu>

	* src/edu/ksu/cis/indus/staticanalyses/callgraphs/CHABasedCallInfoCollector.java : ripple effect of changes to IClassHierarchy.
	* src/edu/ksu/cis/indus/staticanalyses/impl/ClassHierarchy.java :  renamed methods and added a new method to retrieve the
	classes in the hierarchy in topological order.

2005-03-19  venku  <rvprasad@cis.ksu.edu>

	* Changes pertaining to Class Hierarchy calculation, class hierarchy based call graph construction, rapid-type	analysis based
	call graph construction, and refactoring of call graph constructione.

2005-03-14  venku  <rvprasad@cis.ksu.edu>

	* src/edu/ksu/cis/indus/staticanalyses/impl/ClassHierarchy.java: Added an implementation of class hierarchy.

2005-02-27  venku  <rvprasad@cis.ksu.edu>

	* src-dependence/edu/ksu/cis/indus/staticanalyses/dependency/DivergenceDA.java (getDependees): enhanced the
	implementation to return empty divergence dependence information if the given dependees statement does not occur
	in 	the given method's basic block graph.

	* src-dependence/edu/ksu/cis/indus/staticanalyses/dependency/InterProceduralDivergenceDA.java (getDependees): enhanced
	 the implementation to return empty divergence dependence information if the given dependees statement does not occur in
	 the given method's basic block graph.

	* src-dependence/edu/ksu/cis/indus/staticanalyses/dependency/ReadyDAv1.java: Addressed task #275 - converted ready
	dependence info pertaining to ready dependence relating synchronized methods to be non-statement based.

	* src-dependence/edu/ksu/cis/indus/staticanalyses/dependency/AbstractControlDA.java:  Added a new helper function and
	enhanced the implementation to return empty control dependence information if the given dependee/dependent statement does
	not occur in the given method's basic block graph.

2005-02-26  venku  <rvprasad@cis.ksu.edu>

	* src-dependence/edu/ksu/cis/indus/staticanalyses/dependency/DivergenceDA.java: Although divergence is captured in non-
	termination sensitive control dependence, it's mixed with control dependence.  Hence, it is best to calculate divergence
	dependence separately.  This seems like an overhead, but it is useful in program comprehension.  Hence, I reverted to the
	old code base of both intra- and inter-procedural flavour.
		I also changed the manner in which new instances of this class wer created.

	* src-dependence/edu/ksu/cis/indus/staticanalyses/dependency/InterProceduralDivergenceDA.java: Created a pure
	Interprocedural divergence dependence analysis.
		I also changed the manner in which new instances of this class wer created.

	* src-dependence/edu/ksu/cis/indus/staticanalyses/dependency/NonTerminationInsensitiveEntryControlDA.java: Added support
	to toggle between direct	and indirect version of non-termination sensitive control dependence used to calculate non-termination
	insensitive control dependence.

2005-02-25  venku  <rvprasad@cis.ksu.edu>

	* src-xml/edu/ksu/cis/indus/staticanalyses/dependency/DependencyXMLizerCLI.java: Ripple effect from changes to
	DivergenceDA.java.

	* src-dependence/edu/ksu/cis/indus/staticanalyses/dependency/DivergenceDA.java: Trimmed the DivergenceDA to calculate
	simple inter-procedural Divergence dependence.  This can be used in conjunction with non-termination-sensitive control
	dependence to arrive at intra- plus inter-procedural divergence dependence information.